{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Managing FastAPI projects made easy. Documentation : View it on website Source Code : View it on Github Installation : pip install manage-fastapi Features \ud83d\ude80 \u00b6 Creates customizable project boilerplate. \u00b6 Creates customizable app boilerplate. \u00b6 Handles the project structing for you. \u00b6 Get fancy information about your Pydantic models. \u00b6 Example folder structure \ud83d\udce6 \u00b6 fastproject/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 main.py \u251c\u2500\u2500 core \u2502 \u251c\u2500\u2500 models \u2502 \u2502 \u251c\u2500\u2500 database.py \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 schemas \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 schema.py \u2502 \u2514\u2500\u2500 settings.py \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 test_v1.py \u2514\u2500\u2500 v1 \u251c\u2500\u2500 api.py \u251c\u2500\u2500 endpoints \u2502 \u251c\u2500\u2500 endpoint.py \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 __init__.py Getting information about our Pydantic models. \u00b6 manage-fastapi showmodels With this command we are getting a fancy output of our models. \u00b6 \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 item . py \u2551 \u2551 ------- \u2551 \u2551 ItemBase \u2551 \u2551 ItemCreate \u2551 \u2551 ItemUpdate \u2551 \u2551 ItemInDBBase \u2551 \u2551 Item \u2551 \u2551 ItemInDB \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 token . py \u2551 \u2551 -------- \u2551 \u2551 Token \u2551 \u2551 TokenPayload \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d Installation \ud83d\udccc \u00b6 pip install manage-fastapi License \u00b6 This project is licensed under the terms of the MIT license.","title":"Manage FastAPI"},{"location":"#features","text":"","title":"Features \ud83d\ude80"},{"location":"#creates-customizable-project-boilerplate","text":"","title":"Creates customizable project boilerplate."},{"location":"#creates-customizable-app-boilerplate","text":"","title":"Creates customizable app boilerplate."},{"location":"#handles-the-project-structing-for-you","text":"","title":"Handles the project structing for you."},{"location":"#get-fancy-information-about-your-pydantic-models","text":"","title":"Get fancy information about your Pydantic models."},{"location":"#example-folder-structure","text":"fastproject/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 main.py \u251c\u2500\u2500 core \u2502 \u251c\u2500\u2500 models \u2502 \u2502 \u251c\u2500\u2500 database.py \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 schemas \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 schema.py \u2502 \u2514\u2500\u2500 settings.py \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 test_v1.py \u2514\u2500\u2500 v1 \u251c\u2500\u2500 api.py \u251c\u2500\u2500 endpoints \u2502 \u251c\u2500\u2500 endpoint.py \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 __init__.py","title":"Example folder structure \ud83d\udce6"},{"location":"#getting-information-about-our-pydantic-models","text":"manage-fastapi showmodels","title":"Getting information about our Pydantic models."},{"location":"#with-this-command-we-are-getting-a-fancy-output-of-our-models","text":"\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 item . py \u2551 \u2551 ------- \u2551 \u2551 ItemBase \u2551 \u2551 ItemCreate \u2551 \u2551 ItemUpdate \u2551 \u2551 ItemInDBBase \u2551 \u2551 Item \u2551 \u2551 ItemInDB \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 token . py \u2551 \u2551 -------- \u2551 \u2551 Token \u2551 \u2551 TokenPayload \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d","title":"With this command we are getting a fancy output of our models."},{"location":"#installation","text":"pip install manage-fastapi","title":"Installation \ud83d\udccc"},{"location":"#license","text":"This project is licensed under the terms of the MIT license.","title":"License"},{"location":"release-notes/","text":"Release Notes \ud83d\udce3 \u00b6 Latest Changes \u00b6 0.1.60 \u00b6 Delete run-server command Delete show-models command Create new template for settings without database Small fix for project utils 0.1.52 \u00b6 Temporary fix for Path issue when running with uvicorn 0.1.51 \u00b6 Little update on API template 0.1.5 \u00b6 Added showmodels Added runserver Fix little bugs Update docs 0.1.41 \u00b6 Quick fix for a little bug 0.1.4 \u00b6 Changed project architecture Increased travis tests 0.1.3 \u00b6 Make database optional Now Manage FastAPI has support for MongoDB, PostgreSQL, SQLite, MySQL, Tortoise ORM 0.1.2 \u00b6 Add tests Fix and relocate success message Add travis 0.1.1 \u00b6 Added documentation Fixed typos Additional response for successfuly creation. 0.1.0 \u00b6 Prototype of project with two functionalities.","title":"Release Notes"},{"location":"release-notes/#release-notes","text":"","title":"Release Notes \ud83d\udce3"},{"location":"release-notes/#latest-changes","text":"","title":"Latest Changes"},{"location":"release-notes/#0160","text":"Delete run-server command Delete show-models command Create new template for settings without database Small fix for project utils","title":"0.1.60"},{"location":"release-notes/#0152","text":"Temporary fix for Path issue when running with uvicorn","title":"0.1.52"},{"location":"release-notes/#0151","text":"Little update on API template","title":"0.1.51"},{"location":"release-notes/#015","text":"Added showmodels Added runserver Fix little bugs Update docs","title":"0.1.5"},{"location":"release-notes/#0141","text":"Quick fix for a little bug","title":"0.1.41"},{"location":"release-notes/#014","text":"Changed project architecture Increased travis tests","title":"0.1.4"},{"location":"release-notes/#013","text":"Make database optional Now Manage FastAPI has support for MongoDB, PostgreSQL, SQLite, MySQL, Tortoise ORM","title":"0.1.3"},{"location":"release-notes/#012","text":"Add tests Fix and relocate success message Add travis","title":"0.1.2"},{"location":"release-notes/#011","text":"Added documentation Fixed typos Additional response for successfuly creation.","title":"0.1.1"},{"location":"release-notes/#010","text":"Prototype of project with two functionalities.","title":"0.1.0"},{"location":"managing_apps/startapp/","text":"Creating a new project with Manage FastAPI \u00b6 Starting new apps works just like startproject , since you are familiar with that command feel free to skip this part. manage-fastapi startapp [app-name] - Creates a new app. Let\u2019s keep working on the project that we created in Managing Projects. Let\u2019s create a new app called v1 \u00b6 manage-fastapi startapp v1 Application v1 created successfully! Let\u2019s see what it created. Now we have a new folder called v1 and another folder called v1 under our tests folder. Let\u2019s see what they have. fastproject / \u251c\u2500\u2500 __init__ . py \u251c\u2500\u2500 main . py \u251c\u2500\u2500 core \u2502 \u251c\u2500\u2500 models \u2502 \u2502 \u251c\u2500\u2500 database . py \u2502 \u2502 \u2514\u2500\u2500 __init__ . py \u2502 \u251c\u2500\u2500 schemas \u2502 \u2502 \u251c\u2500\u2500 __init__ . py \u2502 \u2502 \u2514\u2500\u2500 schema . py \u2502 \u2514\u2500\u2500 settings . py \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 __init__ . py \u2502 \u2514\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 __init__ . py \u2502 \u2514\u2500\u2500 test_v1 . py \u2514\u2500\u2500 v1 \u251c\u2500\u2500 api . py \u251c\u2500\u2500 endpoints \u2502 \u251c\u2500\u2500 endpoint . py \u2502 \u2514\u2500\u2500 __init__ . py \u2514\u2500\u2500 __init__ . py In our fastproject/v1 we have new 1 directory and 4 files , let\u2019s see what they have. In our endpoints folder we are going create all the endpoints for this app, also endpoints.py comes with a basic Hello world router, from fastapi import APIRouter , Body , Depends router = APIRouter () @router . get ( \"/\" ) async def hello_fastapi (): return { \"Hello\" : \"FastAPI\" } In our api.py we are getting all endpoints together to use from our main.py , # This is an example of how you can route and you are free to change # this will not affect your be included unless you add # from myapp.api import api_router # to your main.py on your project folder from fastapi import APIRouter from myapp.endpoints import endpoint api_router = APIRouter () api_router . include_router ( endpoint . router , prefix = \"/hello\" , tags = [ \"myapp\" ])","title":"Start new app"},{"location":"managing_apps/startapp/#creating-a-new-project-with-manage-fastapi","text":"Starting new apps works just like startproject , since you are familiar with that command feel free to skip this part. manage-fastapi startapp [app-name] - Creates a new app. Let\u2019s keep working on the project that we created in Managing Projects.","title":"Creating a new project with Manage FastAPI"},{"location":"managing_apps/startapp/#lets-create-a-new-app-called-v1","text":"manage-fastapi startapp v1 Application v1 created successfully! Let\u2019s see what it created. Now we have a new folder called v1 and another folder called v1 under our tests folder. Let\u2019s see what they have. fastproject / \u251c\u2500\u2500 __init__ . py \u251c\u2500\u2500 main . py \u251c\u2500\u2500 core \u2502 \u251c\u2500\u2500 models \u2502 \u2502 \u251c\u2500\u2500 database . py \u2502 \u2502 \u2514\u2500\u2500 __init__ . py \u2502 \u251c\u2500\u2500 schemas \u2502 \u2502 \u251c\u2500\u2500 __init__ . py \u2502 \u2502 \u2514\u2500\u2500 schema . py \u2502 \u2514\u2500\u2500 settings . py \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 __init__ . py \u2502 \u2514\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 __init__ . py \u2502 \u2514\u2500\u2500 test_v1 . py \u2514\u2500\u2500 v1 \u251c\u2500\u2500 api . py \u251c\u2500\u2500 endpoints \u2502 \u251c\u2500\u2500 endpoint . py \u2502 \u2514\u2500\u2500 __init__ . py \u2514\u2500\u2500 __init__ . py In our fastproject/v1 we have new 1 directory and 4 files , let\u2019s see what they have. In our endpoints folder we are going create all the endpoints for this app, also endpoints.py comes with a basic Hello world router, from fastapi import APIRouter , Body , Depends router = APIRouter () @router . get ( \"/\" ) async def hello_fastapi (): return { \"Hello\" : \"FastAPI\" } In our api.py we are getting all endpoints together to use from our main.py , # This is an example of how you can route and you are free to change # this will not affect your be included unless you add # from myapp.api import api_router # to your main.py on your project folder from fastapi import APIRouter from myapp.endpoints import endpoint api_router = APIRouter () api_router . include_router ( endpoint . router , prefix = \"/hello\" , tags = [ \"myapp\" ])","title":"Let's create a new app called v1"},{"location":"managing_projects/startproject/","text":"To start a new project with Manage FastAPI, you can use this: manage-fastapi startproject [project-name] - Create a new project. This will create create 4 directories and 8 files for you. Let\u2019s see what it includes, for instance i\u2019m creating a new project called fastproject manage-fastapi startproject fastproject Project fastproject created successfully! The command we ran above, created a main.py that will include all our external app\u2019s. A folder called models for our database stuff, another folder called schemas for our Pydantic models etc and a settings.py file. fastproject/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 main.py \u251c\u2500\u2500 core \u2502 \u251c\u2500\u2500 models \u2502 \u2502 \u251c\u2500\u2500 database.py \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 schemas \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 schema.py \u2502 \u2514\u2500\u2500 settings.py \u2514\u2500\u2500 tests \u2514\u2500\u2500 __init__.py Our main.py gonna be our controller. It will include all the routers other settings stuff to make our project more clean and easy to maintain. from fastapi import FastAPI from fastapi.middleware.cors import CORSMiddleware from fastproject.settings import settings from fastproject.models.database import database app = FastAPI ( title = settings . PROJECT_NAME ) if settings . BACKEND_CORS_ORIGINS : app . add_middleware ( CORSMiddleware , allow_origins = [ str ( origin ) for origin in settings . BACKEND_CORS_ORIGINS ], allow_methods = [ \"*\" ], allow_headers = [ \"*\" ], ) @app . on_event ( \"startup\" ) async def connect_database (): await database . connect () @app . on_event ( \"shutdown\" ) async def disconnect_database (): await database . disconnect () In settings.py we have the settings for all of our project, it comes with just a database settings but you can use the Settings class to include all your OAuth tokens secrets etc. from typing import Any , Dict , List , Optional , Union from pydantic import BaseSettings , AnyHttpUrl , HttpUrl , validator class Settings ( BaseSettings ): PROJECT_NAME : str = \"fastproject\" BACKEND_CORS_ORIGINS : List [ AnyHttpUrl ] = [ \"http://localhost\" , \"http://localhost:80\" , \"http://localhost:8000\" , ] @validator ( \"BACKEND_CORS_ORIGINS\" , pre = True ) def assemble_cors_origins ( cls , v : Union [ str , List [ str ]]) -> Union [ List [ str ], str ]: if isinstance ( v , str ) and not v . startswith ( \"[\" ): return [ i . strip () for i in v . split ( \",\" )] elif isinstance ( v , ( list , str )): return v raise ValueError ( v ) # Database Settings DB_SERVER : Optional [ str ] = \"\" DB_USER : Optional [ str ] = \"\" DB_PASSWORD : Optional [ str ] = \"\" DB_PORT : Optional [ str ] = \"\" DB_NAME : Optional [ str ] = \"\" DB_PORT : Optional [ str ] = \"\" # DATABASE_URL: Optional[ # str # ] = f\"{DB_SERVER}://{DB_USER}:{DB_PASSWORD}@{DB_PORT}:{DB_PORT}/{DB_NAME}\" # DATABASE_URL = \"postgresql://user:passowrd@localhost:5432/DB_NAME\" DATABASE_URL = \"sqlite:///./test.db\" class Config : case_sensitive = True settings = Settings () In models/database.py we create all our database stuff, If you don\u2019t need database you might want to skip this. database.py uses Databases library which is a great library to provide Async database support for Python. import sqlalchemy from fastproject.settings import settings import databases database = databases . Database ( settings . DATABASE_URL ) metadata = sqlalchemy . MetaData () # Put your database models here | Below # FastAPI documentation for databases: https://fastapi.tiangolo.com/advanced/async-sql-databases/ # Put your database models here | Above engine = sqlalchemy . create_engine ( settings . DATABASE_URL ) metadata . create_all ( engine ) Under schemas we will declare all our models. schemas/schema.py comes with a example class. Feel free to delete it if you are experienced with FastAPI . # For more information check Pydantic documentation = https://pydantic-docs.helpmanual.io/usage/models/ # # Creating your custom classes # # class ClassName(BaseModel): # name: str # value: int # from pydantic import BaseModel , Field class Model ( BaseModel ): pass Let\u2019s skip to the next documentation to see how we can create new apps. \u00b6","title":"Start new project"},{"location":"managing_projects/startproject/#lets-skip-to-the-next-documentation-to-see-how-we-can-create-new-apps","text":"","title":"Let's skip to the next documentation to see how we can create new apps."}]}